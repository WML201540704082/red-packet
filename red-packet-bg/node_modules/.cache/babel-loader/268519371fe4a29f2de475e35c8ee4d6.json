{"ast":null,"code":"import \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\n\n/*\n能发送一步ajax请求的函数模块\n封装axios库\n函数的返回值promise对象\n1. 优化1:统一处理请求异常\n    在外层包一个自己创建的promise对象\n    在请求出错时，不reject(error),而是显示错误提示\n2. 优化2: 异步得到不是response，而是response.data\n    在请求成功resolve时:resolve(response.data)\n*/\nimport axios from \"axios\";\nimport memoryUtils from '../utils/memoryUtils';\nexport default function ajax(url, data = {}, type = 'GET') {\n  axios.defaults.headers['Authorization'] = memoryUtils.user.token;\n  return new Promise((resolve, reject) => {\n    let promise; // 1.执行异步ajax请求\n\n    if (type === 'GET') {\n      promise = axios.get(url, {\n        params: data\n      });\n    } else {\n      promise = axios.post(url, data);\n    } // 2.如果成功了，调用resolve(value)\n\n\n    promise.then(response => {\n      resolve(response.data); // 3,如果失败了，不调用reject(reason)，而是提示异常信息\n    }).catch(error => {\n      // reject(error)\n      _message.error('请求出错了:' + error.message);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/superskysxh/Desktop/red-packet-background-1/red-packet-bg/src/api/axjax.js"],"names":["axios","memoryUtils","ajax","url","data","type","defaults","headers","user","token","Promise","resolve","reject","promise","get","params","post","then","response","catch","error","message"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,eAAe,SAASC,IAAT,CAAcC,GAAd,EAAmBC,IAAI,GAAC,EAAxB,EAA4BC,IAAI,GAAC,KAAjC,EAAwC;AAEnDL,EAAAA,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuB,eAAvB,IAA0CN,WAAW,CAACO,IAAZ,CAAiBC,KAA3D;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAJ,CADoC,CAEpC;;AACA,QAAIR,IAAI,KAAK,KAAb,EAAoB;AAChBQ,MAAAA,OAAO,GAAGb,KAAK,CAACc,GAAN,CAAUX,GAAV,EAAe;AACrBY,QAAAA,MAAM,EAAEX;AADa,OAAf,CAAV;AAGH,KAJD,MAIO;AACHS,MAAAA,OAAO,GAAGb,KAAK,CAACgB,IAAN,CAAWb,GAAX,EAAgBC,IAAhB,CAAV;AACH,KATmC,CAUpC;;;AACAS,IAAAA,OAAO,CAACI,IAAR,CAAaC,QAAQ,IAAI;AACrBP,MAAAA,OAAO,CAACO,QAAQ,CAACd,IAAV,CAAP,CADqB,CAEzB;AACC,KAHD,EAGGe,KAHH,CAGSC,KAAK,IAAI;AACd;AACA,eAAQA,KAAR,CAAc,WAAWA,KAAK,CAACC,OAA/B;AACH,KAND;AAOH,GAlBM,CAAP;AAmBH","sourcesContent":["/*\n能发送一步ajax请求的函数模块\n封装axios库\n函数的返回值promise对象\n1. 优化1:统一处理请求异常\n    在外层包一个自己创建的promise对象\n    在请求出错时，不reject(error),而是显示错误提示\n2. 优化2: 异步得到不是response，而是response.data\n    在请求成功resolve时:resolve(response.data)\n*/\nimport axios from \"axios\"\nimport { message } from \"antd\";\nimport memoryUtils from '../utils/memoryUtils'\n\nexport default function ajax(url, data={}, type='GET') {\n\n    axios.defaults.headers['Authorization'] = memoryUtils.user.token\n\n    return new Promise((resolve, reject) => {\n        let promise\n        // 1.执行异步ajax请求\n        if (type === 'GET') {\n            promise = axios.get(url, {\n                params: data\n            })\n        } else {\n            promise = axios.post(url, data)\n        }\n        // 2.如果成功了，调用resolve(value)\n        promise.then(response => {\n            resolve(response.data)\n        // 3,如果失败了，不调用reject(reason)，而是提示异常信息\n        }).catch(error => {\n            // reject(error)\n            message.error('请求出错了:' + error.message)\n        })\n    })\n}"]},"metadata":{},"sourceType":"module"}