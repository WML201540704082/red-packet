{"ast":null,"code":"import \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nvar _jsxFileName = \"/Users/superskysxh/Desktop/red-packet-background/red-packet-bg/src/components/left-nav/index.jsx\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport logo from '../../assets/images/logo.png';\nimport menuList from '../../config/menuConfig';\nimport './index.less';\nimport Sider from 'antd/lib/layout/Sider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SubMenu\n} = _Menu;\n\nclass leftNav extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      collapsed: false\n    };\n\n    this.toggleCollapsed = () => {\n      this.setState({\n        collapsed: !this.state.collapsed\n      });\n    };\n\n    this.getMenuNodes_map = menuList => {\n      return menuList.map(item => {\n        if (!item.children) {\n          return /*#__PURE__*/_jsxDEV(_Menu.Item, {\n            icon: item.icon,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: item.key,\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 25\n            }, this)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(SubMenu, {\n            icon: item.icon,\n            title: item.title,\n            children: this.getMenuNodes(item.children)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }, this);\n        }\n      });\n    };\n\n    this.getMenuNodes = menuList => {\n      // 得到当前请求的路由路径\n      const path = this.props.location.pathname;\n      return menuList.reduce((pre, item) => {\n        // 向pre添加<Menu.Item>\n        if (!item.children) {\n          pre.push( /*#__PURE__*/_jsxDEV(_Menu.Item, {\n            icon: item.icon,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: item.key,\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this));\n        } else {\n          // 查找一个与当前请求路径匹配的子Item\n          const cItem = item.children.find(cItem => cItem.key === path);\n\n          if (cItem) {\n            // 如果存在，说明当前item的子列表需要打开\n            this.openKey = item.key;\n          } // 向pre添加<SubMenu>\n\n\n          pre.push( /*#__PURE__*/_jsxDEV(SubMenu, {\n            icon: item.icon,\n            title: item.title,\n            children: this.getMenuNodes(item.children)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this));\n        }\n\n        return pre;\n      }, []);\n    };\n  }\n\n  /*\n      在第一次render()之前执行一次\n      为第一个render()准备数据(必须同步的)\n  */\n  componentWillMount() {\n    this.menuNodes = this.getMenuNodes(menuList);\n  }\n\n  render() {\n    // 得到当前请求的路由路径\n    const path = this.props.location.pathname; // 得到需要打开菜单项的key\n\n    const openKey = this.openKey;\n    return /*#__PURE__*/_jsxDEV(Sider, {\n      trigger: null,\n      breakpoint: \"lg\",\n      collapsed: this.state.collapsed,\n      className: \"left-nav\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"left-nav-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u7EA2\\u5305\\u62BD\\u5956\\u540E\\u53F0\\u7BA1\\u7406\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Menu, {\n        selectedKeys: [path],\n        defaultOpenKeys: [openKey],\n        mode: \"inline\",\n        theme: \"dark\",\n        children: this.menuNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/*\nwithRouter高阶组件：\n包装非路由组件，返回一个新的组件你\n新的组件向非路由组件传递3个属性：history/location/match\n*/\n\n\nexport default withRouter(leftNav);","map":{"version":3,"sources":["/Users/superskysxh/Desktop/red-packet-background/red-packet-bg/src/components/left-nav/index.jsx"],"names":["React","Component","Link","withRouter","logo","menuList","Sider","SubMenu","leftNav","state","collapsed","toggleCollapsed","setState","getMenuNodes_map","map","item","children","icon","key","title","getMenuNodes","path","props","location","pathname","reduce","pre","push","cItem","find","openKey","componentWillMount","menuNodes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport { Menu } from 'antd';\nimport logo from '../../assets/images/logo.png'\nimport menuList from '../../config/menuConfig'\nimport './index.less'\nimport Sider from 'antd/lib/layout/Sider';\n\nconst { SubMenu } = Menu;\n\nclass leftNav extends Component {\n    state = {\n        collapsed: false,\n    };\n\n    toggleCollapsed = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    };\n\n    // 根据menu的数据数组生成对应的标签数组\n    // 使用map() + 递归调用\n    getMenuNodes_map = (menuList) => {\n        return menuList.map(item => {\n            if (!item.children) {\n                return (\n                    <Menu.Item key={item.key} icon={item.icon}>\n                        <Link to={item.key}>{item.title}</Link>\n                    </Menu.Item>\n                )\n            } else {\n                return (\n                    <SubMenu key={item.key} icon={item.icon} title={item.title}>\n                        {this.getMenuNodes(item.children)}\n                    </SubMenu>\n                )\n            }\n        })\n    }\n\n    // 根据menu的数据数组生成对应的标签数组\n    // 使用reduce() + 递归调用\n    getMenuNodes = (menuList) => {\n        // 得到当前请求的路由路径\n        const path = this.props.location.pathname\n        \n        return menuList.reduce((pre,item) => {\n            // 向pre添加<Menu.Item>\n            if (!item.children) {\n                pre.push((\n                    <Menu.Item key={item.key} icon={item.icon}>\n                        <Link to={item.key}>{item.title}</Link>\n                    </Menu.Item>\n                ))\n            } else {\n\n                // 查找一个与当前请求路径匹配的子Item\n                const cItem = item.children.find(cItem => cItem.key === path)\n                if (cItem) {\n                    // 如果存在，说明当前item的子列表需要打开\n                    this.openKey = item.key   \n                }\n\n                // 向pre添加<SubMenu>\n                pre.push((\n                    <SubMenu key={item.key} icon={item.icon} title={item.title}>\n                        {this.getMenuNodes(item.children)}\n                    </SubMenu>\n                ))\n            }\n\n            return pre\n        }, [])\n    }\n\n    /*\n        在第一次render()之前执行一次\n        为第一个render()准备数据(必须同步的)\n    */\n    componentWillMount() {\n        this.menuNodes = this.getMenuNodes(menuList)\n    }\n\n    render() {\n        // 得到当前请求的路由路径\n        const path = this.props.location.pathname\n        // 得到需要打开菜单项的key\n        const openKey = this.openKey\n\n        return (\n            <Sider\n                trigger={null}\n                breakpoint=\"lg\"\n                collapsed={this.state.collapsed}\n                className=\"left-nav\">\n                <Link to='/' className=\"left-nav-header\">\n                    <img src={logo} alt=\"logo\" />\n                    <h1>红包抽奖后台管理</h1>\n                </Link>\n                <Menu\n                    selectedKeys={[path]}\n                    defaultOpenKeys={[openKey]}\n                    mode=\"inline\"\n                    theme=\"dark\"\n                    >\n                        {\n                            this.menuNodes\n                        }\n                </Menu>\n            </Sider>\n        )\n    }\n}\n\n/*\nwithRouter高阶组件：\n包装非路由组件，返回一个新的组件你\n新的组件向非路由组件传递3个属性：history/location/match\n*/\nexport default withRouter(leftNav)"]},"metadata":{},"sourceType":"module"}